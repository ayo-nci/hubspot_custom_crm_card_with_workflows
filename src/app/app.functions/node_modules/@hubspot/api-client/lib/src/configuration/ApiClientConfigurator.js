"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClientConfigurator = void 0;
const _ = __importStar(require("lodash"));
const version_1 = require("./version");
class ApiClientConfigurator {
    static getParams(config, serverConfigurationClass, observableRequestContextParam, observableResponseContextParam) {
        const params = {
            middleware: [
                this.getHeaderMiddleware(config, observableRequestContextParam, observableResponseContextParam),
            ],
            authMethods: this.getAuthMethods(config),
        };
        _.merge(params, this.getBaseServer(config, serverConfigurationClass));
        return params;
    }
    static getUserAgent() {
        return `hubspot-api-client-nodejs; ${version_1.VERSION}`;
    }
    static getAuthMethods(config) {
        let authMethods = {};
        if (config.accessToken) {
            authMethods = Object.assign(authMethods, {
                oauth2: {
                    accessToken: config.accessToken,
                },
            });
            authMethods = Object.assign(authMethods, {
                oauth2_legacy: {
                    accessToken: config.accessToken,
                },
            });
        }
        if (config.apiKey) {
            authMethods = Object.assign(authMethods, {
                hapikey: config.apiKey,
            });
        }
        if (config.developerApiKey) {
            authMethods = Object.assign(authMethods, {
                developer_hapikey: config.developerApiKey,
            });
        }
        return authMethods;
    }
    static getBaseServer(config, serverConfigurationClass) {
        if (config.basePath) {
            return { baseServer: new serverConfigurationClass(config.basePath, {}) };
        }
        return {};
    }
    static getHeaderMiddleware(config, observableRequestContextParam, observableResponseContextParam) {
        const headers = _.merge(config.defaultHeaders, { 'User-agent': this.getUserAgent() });
        return {
            pre(context) {
                _.forIn(headers, (value, key) => {
                    context.setHeaderParam(key, value);
                });
                return new observableRequestContextParam(Promise.resolve(context));
            },
            post(context) {
                return new observableResponseContextParam(Promise.resolve(context));
            },
        };
    }
}
exports.ApiClientConfigurator = ApiClientConfigurator;
//# sourceMappingURL=ApiClientConfigurator.js.map