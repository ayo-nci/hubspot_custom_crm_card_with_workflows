import { IConfiguration } from './configuration/IConfiguration';
import { AutomationDiscovery } from './discovery/automation/AutomationDiscovery';
import { CmsDiscovery } from './discovery/cms/CmsDiscovery';
import { CommunicationPreferencesDiscovery } from './discovery/communicationPreferences/CommunicationPreferencesDiscovery';
import { ConversationsDiscovery } from './discovery/conversations/ConversationsDiscovery';
import { CrmDiscovery } from './discovery/crm/CrmDiscovery';
import { EventsDiscovery } from './discovery/events/EventsDiscovery';
import { MarketingDiscovery } from './discovery/marketing/MarketingDiscovery';
import { OauthDiscovery } from './discovery/oauth/OauthDiscovery';
import { SettingsDiscovery } from './discovery/settings/SettingsDiscovery';
import { WebhooksDiscovery } from './discovery/webhooks/WebhooksDiscovery';
import { IHttpOptions } from './services/http/IHttpOptions';
export declare class Client {
    automation: AutomationDiscovery;
    cms: CmsDiscovery;
    communicationPreferences: CommunicationPreferencesDiscovery;
    conversations: ConversationsDiscovery;
    crm: CrmDiscovery;
    events: EventsDiscovery;
    marketing: MarketingDiscovery;
    oauth: OauthDiscovery;
    settings: SettingsDiscovery;
    webhooks: WebhooksDiscovery;
    config: IConfiguration;
    constructor(config?: IConfiguration);
    init(): void;
    setAccessToken(token: string): void;
    setApiKey(apiKey: string): void;
    setDeveloperApiKey(developerApiKey: string): void;
    apiRequest(opts?: IHttpOptions): Promise<import("node-fetch").Response>;
}
