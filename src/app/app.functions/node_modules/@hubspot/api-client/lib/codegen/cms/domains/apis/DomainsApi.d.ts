import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { CollectionResponseWithTotalDomain } from '../models/CollectionResponseWithTotalDomain';
import { Domain } from '../models/Domain';
export declare class DomainsApiRequestFactory extends BaseAPIRequestFactory {
    getById(domainId: string, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    getPage(createdAt?: number, createdAfter?: number, createdBefore?: number, updatedAt?: number, updatedAfter?: number, updatedBefore?: number, sort?: Array<string>, properties?: Array<string>, after?: string, before?: string, limit?: number, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
}
export declare class DomainsApiResponseProcessor {
    getById(response: ResponseContext): Promise<Domain>;
    getPage(response: ResponseContext): Promise<CollectionResponseWithTotalDomain>;
}
